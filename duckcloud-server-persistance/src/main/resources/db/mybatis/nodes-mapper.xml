<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.trodix.duckcloud.persistance.dao.mappers.NodeMapper">

    <resultMap id="result_Node" type="Node">
        <result property="id" column="n_id" jdbcType="BIGINT" javaType="java.lang.Long" />
        <result property="parentId" column="n_parent_id" jdbcType="BIGINT" />
        <association property="type" javaType="Type">
            <id property="id" column="ty_id" />
            <result property="name" column="ty_name" />
        </association>
        <collection property="tags" ofType="Tag">
            <id property="id" column="tag_id" />
            <result property="name" column="tag_name" />
        </collection>
        <collection property="properties" ofType="Property">
            <id property="id" column="p_id" />
            <result property="propertyName" column="p_property_name" />
            <result property="stringVal" column="p_string_val" />
            <result property="longVal" column="p_long_val" />
            <result property="doubleVal" column="p_double_val" />
            <result property="dateVal" column="p_date_val" />
        </collection>
    </resultMap>

    <resultMap id="result_TreeNode" type="TreeNode">
        <result property="nodeId" column="id" />
        <result property="parentId" column="parent_id" />
        <result property="nodeLevel" column="node_level" />
        <result property="nodePath" column="node_path" />
    </resultMap>

    <sql id="fields_Node">
        n.id as n_id, n.parent_id as n_parent_id, n.type_id as n_type_id
    </sql>

    <sql id="select_node">
        SELECT
            <include refid="fields_Node" />,
            ty.id as ty_id, ty.name as ty_name,
            t.id as tag_id, t.name as tag_name,
            p.id as p_id, p.node_id as p_node_id, p.property_name as p_property_name,
            p.string_val as p_string_val, p.long_val as p_long_val, p.double_val as p_double_val,
            p.date_val as p_date_val
        FROM nodes n
        LEFT JOIN types ty ON ty.id = n.type_id
        LEFT JOIN node_tag nt ON nt.node_id = n.id
        LEFT JOIN tags t ON t.id = nt.tag_id
        LEFT JOIN properties p ON n.id = p.node_id
    </sql>

    <select id="findOne" resultMap="result_Node">
        <include refid="select_node" /> WHERE n.id = #{id}
    </select>

    <select id="findAll" resultMap="result_Node">
        <include refid="select_node" />
    </select>

    <select id="findTreeNodesByParentId" resultMap="result_TreeNode">
        WITH RECURSIVE node_result as (
            SELECT
                n1.id,
                n1.parent_id,
                0 as node_level,
                n1.id::VARCHAR as node_path
            FROM nodes n1
                WHERE n1.id = #{parentId}

            UNION ALL

            SELECT
                n2.id,
                n2.parent_id,
                node_level+1,
                node_path::VARCHAR || ',' || n2.id::VARCHAR
            FROM nodes n2
            JOIN node_result ntr on ntr.id = n2.parent_id

        ) SELECT * FROM node_result;
    </select>

    <select id="findAllByNodeId" resultMap="result_Node">
        <include refid="select_node" />
        WHERE n.id IN
        <foreach collection="ids" item="node_id" index="index" open="(" separator="," close=")">
            #{node_id}
        </foreach>
    </select>

    <select id="findAllByParentId" resultMap="result_Node">
        <include refid="select_node" />
        WHERE n.parent_id = #{parentId}
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO nodes
        (
            parent_id, type_id
        )
        VALUES
        (
            #{parentId}, #{type.id}
        )
        RETURNING id
    </insert>

    <insert id="insertNodeTagAssociation">
        INSERT INTO node_tag (node_id, tag_id) VALUES (#{nodeId}, #{tagId})
    </insert>

    <update id="update">
        UPDATE nodes SET parent_id = #{parentId}, type_id = #{type.id} WHERE id = #{id}
    </update>

    <delete id="delete">
        DELETE FROM nodes WHERE id = #{id}
    </delete>

    <delete id="deleteAllNodeTagAssociations">
        DELETE FROM node_tag nt WHERE nt.node_id = #{id}
    </delete>

    <delete id="deleteNodeTagAssociation">
        DELETE FROM node_tag nt WHERE nt.node_id = #{nodeId} AND nt.tag_id = #{tagId}
    </delete>

</mapper>